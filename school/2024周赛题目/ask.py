import os
import subprocess
import json
from openai import OpenAI

# 读取Markdown文件内容
def read_markdown_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

# 读取源码文件内容
def read_source_code_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

# 编译C++代码，生成可执行文件
def compile_cpp_code(cpp_file_path, executable_path):
    try:
        subprocess.run(['g++', cpp_file_path, '-o', executable_path])
        print(f"编译成功: {executable_path}")
    except subprocess.CalledProcessError as e:
        print(f"编译失败: {e}")
        exit(1)

# 使用DeepSeek API生成generate.py代码
def generate_generate_py(prompt, api_key):
    client = OpenAI(api_key=api_key, base_url="https://api.deepseek.com/beta")

    response = client.chat.completions.create(
        model="deepseek-coder",
        messages=[
            {"role": "system", "content": "You are a helpful assistant"},
            {"role": "user", "content": prompt},
        ],
        stream=False,
        response_format={'type': 'json_object'},  # 设置响应格式为JSON对象
        max_tokens=8192,  # 设置最大token数为128k
        temperature=0.0
    )

    if response.choices:
        generate_py_code = json.loads(response.choices[0].message.content)['code']
        with open('generate.py', 'w', encoding='utf-8') as file:
            file.write(generate_py_code)
        print("generate.py 生成成功")
    else:
        print("生成generate.py失败")

# 运行生成的generate.py代码
def run_generate_py():
    try:
        subprocess.run(['python', 'generate.py'], check=True)
        print("generate.py 运行成功")
    except subprocess.CalledProcessError as e:
        print(f"运行generate.py失败: {e}")

# 检查并获取API Key
def get_api_key():
    api_key_file = "api.key"
    if os.path.exists(api_key_file):
        with open(api_key_file, 'r') as file:
            return file.read().strip()
    else:
        api_key = input("请输入你的DeepSeek API Key: ")
        with open(api_key_file, 'w') as file:
            file.write(api_key)
        return api_key

# 主函数
def main():
    markdown_file_path = input("请输入题目描述的Markdown文件路径: ")
    ac_code_path = input("请输入AC代码(C++源文件)的路径: ")
    #output_dir = input("请输入存储生成测试数据和输出的目录: ")

    # 读取题目描述的Markdown文件内容
    problem_description = read_markdown_file(markdown_file_path)

    # 读取源码文件内容
    source_code_content = read_source_code_file(ac_code_path)

    # 编译AC代码
    executable_path = "ac_executable"  # 默认的可执行文件
    compile_cpp_code(ac_code_path, executable_path)

    # 获取API Key
    api_key = get_api_key()

    # 生成generate.py代码使用DeepSeek API
    prompt = f"""
        **Prompt:**

        Hello, you are now a master in AI, computer programming, and ACM. I have some requirements for you to solve. First, let's establish some rules. If the program is multi-instance, it should first ask if there are multiple sets of inputs. If the result is `i`, it means `i` sets. If the result is `0`, it means an unknown number of sets, and you need to specify the range of the number of sets. If the result is `n`, it means multiple instances, and each instance is independent. Then, specify the behavior of each instance. Each instance contains at least one `<input stream>`, and each input stream must include at least one `<type>` or `<input stream>`. The input stream determines the input behavior of the data set, and the type specifies the format of the input data.

        Now, I need a Python code to generate random data for a C++ algorithm problem. The code should generate random data according to the input format of the problem, and then use the data as input to the program. The data should be saved in `.in` files in the `./data/` directory. There may be many `.in` files, each representing a complete set of input data for the program. The correct answers should be generated by running the given AC executable code and saved in corresponding `.out` files. This completes the generation of the dataset.

        Note that the `generate.py` code only needs to ask the user input a num how many sets of .in and .out files they need to generate.; the another necessary information should be filled in by the AI itself. The comments and prompts in the output should be in Chinese.

        ---

        **Note:**

        - Replace the user input sections in the example code with AI-generated values.
        - Ensure that the generated `generate.py` code does not interact with the user and is fully self-contained.
        - The comments and prompts in the output should be in Chinese.

        Please generate a Python code to generate random data for a C++ algorithm problem. The code should include the following functionalities:
        1. Generate random data based on the problem description.
        2. Save the generated data to `.in` files in the `./data/` directory.
        3. Run the given AC executable code, using the generated data as input, and save the output results to corresponding `.out` files.
        4. Please name the output data folder according to the problem number, for example: the data folder for problem [number] should be named `[number]_data`, and the `.in` and `.out` files inside should be numbered sequentially, such as `1.in` and `1.out`.[number] is the problem number, for example, for problem A, the folder should be named `A_data`.
        5. Please prompt the user in the console of the generated `generate.py` file to ask how many sets of data they need to generate, and then proceed according to the user's request.
        6. Please write the purpose of the file at the beginning of the generated file. Note that the comments should be in Python format.For example, use `#` for comments, not `/* */` which is the format for C language..
        7. Note that each line in the output `.in` and `.out` files should end with a newline character, including the last line.
        8. Ensure that the generated Python code has correct indentation and can be executed properly. Strictly adhere to Python coding conventions and do not provide incorrect code, as the consequences can be very severe.
        9. Add an encoding declaration at the beginning of the `generate.py` file to ensure the file uses UTF-8 encoding. Add: `# -*- coding: utf-8 -*-`.
        10. Do not exceed the bounds, as the consequences can be very severe. Also, pay special attention to the total sum of `n` in multi-instance scenarios, which often cannot exceed a certain value.
        11. Please carefully check for common issues such as out-of-bounds indices and other details. Avoid these issues at all costs, as the consequences can be severe. Strictly ensure that the necessary spaces are present and that unnecessary spaces are not added.

        Problem description:
        {problem_description}

        Executable file path:
        {executable_path}

        Source code content:
        {source_code_content}

        The comments and prompts in the output should be in Chinese.Please ensure that the output code conforms to Python syntax, has correct indentation, and must not contain any errors.

        Please generate the code and return it in the following JSON format:
        ```json
        {{"code":"/*there is generate.py code.*/"}}
        ```
    """
    generate_generate_py(prompt, api_key)

    # 运行生成的generate.py代码
    run_generate_py()

if __name__ == "__main__":
    main()